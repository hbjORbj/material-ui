{
  "props": {
    "actions": { "type": { "name": "custom", "description": "ref" } },
    "anchorEl": {
      "type": {
        "name": "union",
        "description": "HTML element<br>&#124;&nbsp;object<br>&#124;&nbsp;func"
      }
    },
    "component": { "type": { "name": "elementType" } },
    "onOpenChange": { "type": { "name": "func" } },
    "open": { "type": { "name": "bool" }, "default": "false" },
    "slotProps": {
      "type": {
        "name": "shape",
        "description": "{ listbox?: func<br>&#124;&nbsp;object, root?: func<br>&#124;&nbsp;{ anchorEl?: function (props, propName) {\n  if (props[propName] == null) {\n    return new Error(\"Prop '\" + propName + \"' is required but wasn't specified\");\n  } else if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(\"Expected prop '\" + propName + \"' to be of type Element\");\n  }\n}<br>&#124;&nbsp;func<br>&#124;&nbsp;{ contextElement?: function (props, propName) {\n  if (props[propName] == null) {\n    return null;\n  } else if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(\"Expected prop '\" + propName + \"' to be of type Element\");\n  }\n}, getBoundingClientRect: func }, children?: element<br>&#124;&nbsp;func<br>&#124;&nbsp;number<br>&#124;&nbsp;{ __@iterator@94: func }<br>&#124;&nbsp;string<br>&#124;&nbsp;bool, container?: function (props, propName) {\n  if (props[propName] == null) {\n    return new Error(\"Prop '\" + propName + \"' is required but wasn't specified\");\n  } else if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n    return new Error(\"Expected prop '\" + propName + \"' to be of type Element\");\n  }\n}<br>&#124;&nbsp;func, direction?: 'ltr'<br>&#124;&nbsp;'rtl', disablePortal?: bool, keepMounted?: bool, modifiers?: Array&lt;{ data?: object, effect?: func, enabled?: bool, fn?: func, name?: any, options?: object, phase?: 'afterMain'<br>&#124;&nbsp;'afterRead'<br>&#124;&nbsp;'afterWrite'<br>&#124;&nbsp;'beforeMain'<br>&#124;&nbsp;'beforeRead'<br>&#124;&nbsp;'beforeWrite'<br>&#124;&nbsp;'main'<br>&#124;&nbsp;'read'<br>&#124;&nbsp;'write', requires?: Array&lt;string&gt;, requiresIfExists?: Array&lt;string&gt; }&gt;, open?: bool, placement?: 'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top', popperOptions?: { modifiers?: array, onFirstUpdate?: func, placement?: 'auto-end'<br>&#124;&nbsp;'auto-start'<br>&#124;&nbsp;'auto'<br>&#124;&nbsp;'bottom-end'<br>&#124;&nbsp;'bottom-start'<br>&#124;&nbsp;'bottom'<br>&#124;&nbsp;'left-end'<br>&#124;&nbsp;'left-start'<br>&#124;&nbsp;'left'<br>&#124;&nbsp;'right-end'<br>&#124;&nbsp;'right-start'<br>&#124;&nbsp;'right'<br>&#124;&nbsp;'top-end'<br>&#124;&nbsp;'top-start'<br>&#124;&nbsp;'top', strategy?: 'absolute'<br>&#124;&nbsp;'fixed' }, popperRef?: func<br>&#124;&nbsp;{ current?: object }, slotProps?: { root?: func<br>&#124;&nbsp;object }, slots?: { root?: elementType }, transition?: bool } }"
      },
      "default": "{}"
    },
    "slots": {
      "type": { "name": "shape", "description": "{ listbox?: elementType, root?: elementType }" },
      "default": "{}"
    }
  },
  "name": "Menu",
  "styles": { "classes": [], "globalClasses": {}, "name": null },
  "slots": [
    {
      "name": "root",
      "description": "The component that renders the root.",
      "default": "Popper",
      "class": ".MuiMenu-root"
    },
    {
      "name": "listbox",
      "description": "The component that renders the listbox.",
      "default": "'ul'",
      "class": ".MuiMenu-listbox"
    }
  ],
  "classes": { "classes": ["expanded"], "globalClasses": { "expanded": "Mui-expanded" } },
  "spread": false,
  "muiName": "MuiMenu",
  "forwardsRefTo": "HTMLDivElement",
  "filename": "/packages/mui-base/src/Menu/Menu.tsx",
  "inheritance": null,
  "demos": "<ul><li><a href=\"/base/react-menu/\">Menu</a></li></ul>",
  "cssComponent": false
}
